use clap::{
    Arg,
    Command,
};

pub fn create_match() -> clap::Command {
    let matches = Command::new("blutgang")
        .version("0.1.0")
        .author("makemake <vukasin@gostovic.me>")
        .about("Tool for replaying historical transactions. Designed to be used with anvil or hardhat.")
        .arg(Arg::new("rpc_list")
            .long("rpc_list")
            .short('r')
            .num_args(1..)
            .default_value("")
            .conflicts_with("config")
            .help("CSV list of rpcs"))
        .arg(Arg::new("config")
            .long("config")
            .short('c')
            .num_args(1..)
            .default_value("config.toml")
            .conflicts_with("rpc_list")
            .help("TOML config file for blutgang"))
        .arg(Arg::new("port")
            .long("port")
            .short('p')
            .num_args(1..)
            .default_value("3000")
            .help("port to listen to"))
        .arg(Arg::new("address")
            .long("address")
            .short('a')
            .num_args(1..)
            .default_value("127.0.0.1")
            .help("port to listen to"))
        .arg(Arg::new("ma_length")
            .long("ma_length")
            .num_args(1..)
            .default_value("15")
            .help("Latency moving average length"))
        .arg(Arg::new("db")
            .long("db")
            .short('d')
            .num_args(1..)
            .default_value("blutgang-cache")
            .help("Database path"))
        .arg(Arg::new("cache_capacity")
            .long("cache_capacity")
            .num_args(1..)
            .default_value("1000000000")
            .help("Capacity of the cache stored in memory in bytes"))
        .arg(Arg::new("print_profile")
            .long("print_profile")
            .num_args(0..)
            .help("Print DB profile on drop"))
        .arg(Arg::new("compression")
            .long("compression")
            .num_args(0..)
            .help("Use zstd compression"))
        .arg(Arg::new("flush_every_ms")
            .long("flush_every_ms")
            .num_args(1..)
            .default_value("1000")
            .help("Time in ms to flush the DB"))
        .arg(Arg::new("clear")
            .long("clear")
            .num_args(0..)
            .help("Clear cache"));

    return matches;
}
